## Fast filter fitting and cluster a hyper-spectral data set
In this script, we will load a hyper-spectrum from a RPL/RAW file to
construct a HyperSpectrum, we will load reference spectra which we will
use to extract k-ratios from the data.  We will cluster the data based
on the normalized k-ratios and then plot the results as a colorized
image and as sum spectra for each cluster.

First, load the necessary libraries.
```julia
using DrWatson
@quickactivate("HyperspectraWithNeXL")

using HyperspectraWithNeXL
using NeXLSpectrum
using NeXLParticle
using DataFrames
using Images, Colors
using FileIO
using Gadfly
using LinearAlgebra
using Unitful
```
The read in the data from the RPL/RAW file.
```julia
ENV["DATADEPS_ALWAYS_ACCEPT"] = true
lt = 0.70*4.0*18.0*3600.0/(1024*1024) # 18.0 hours on 4 detectors
hs = NeXLSpectrum.compress(HyperSpectrum(
    LinearEnergyScale(0.0,10.0),
    Dict{Symbol,Any}(
      :TakeOffAngle => deg2rad(35.0),
      :ProbeCurrent => 1.0, 
      :LiveTime => lt, 
      :BeamEnergy => 20.0e3, 
      :Name => "Mn Nodule"
    ),
    readrplraw(joinpath(datadep"MnNodule","map[15]")), 
    fov = [ 4.096u"mm", 4.096u"mm"], offset= [ 0.0u"mm", 0.0u"mm" ]
)); #[1:16:end,1:16:end];
```

Next read in the reference spectra that will be used to extract the k-ratios
from the HyperSpectrum.
```julia
refpath = datadep"MnNodule_Standards"
# The material composition is read from the spectrum file.
refs = references( [
    reference(n"Ag", joinpath(refpath, "Ag std.msa") ),
    reference(n"Al", joinpath(refpath, "Al std.msa") ),
    reference(n"C", joinpath(refpath, "C std.msa") ),
    reference(n"Ca", joinpath(refpath, "CaF2 std.msa") ),
    reference(n"Ce", joinpath(refpath, "CeO2 std.msa") ),
    reference(n"Cl", joinpath(refpath, "NaCl std.msa") ),
    reference(n"Cr", joinpath(refpath, "Cr std.msa") ),
    reference(n"Cu", joinpath(refpath, "Cu std.msa") ),
    reference(n"Fe", joinpath(refpath, "Fe std.msa") ),
    reference(n"S", joinpath(refpath, "FeS2 std.msa") ),
    reference(n"P", joinpath(refpath, "GaP std.msa") ),
    reference(n"K", joinpath(refpath, "KBr std.msa") ),
    reference(n"Mg", joinpath(refpath, "Mg std.msa") ),
    reference(n"O", joinpath(refpath, "MgO std.msa") ),
    reference(n"Mn", joinpath(refpath, "Mn std.msa") ),
    reference(n"Na", joinpath(refpath, "NaCl std.msa") ),
    reference(n"Ni", joinpath(refpath, "Ni std.msa") ),
    reference(n"Si", joinpath(refpath, "Si std.msa") ),
    reference(n"Ti", joinpath(refpath, "Ti std.msa") ),
    reference(n"Zn", joinpath(refpath, "Zn std.msa") ) ], 132.0
)
```

Fit the HyperSpectrum using the references.  We will use the :Fast algorithm because it is good enough to
generate maps of normalized k-ratios.

```julia;
@time resf = fit_spectrum(hs, refs, mode = :Fast)
```

For many of the reference spectra, there are multiple characteristic x-ray peaks
to fit.  We must fit them all.  However, when it comes time to display the
data, we want to select one line family per element.  Then we will normalize
the k-ratios to a sum of unity for each spectrum in the hyper-spectrum.

In Julia, gray-scale images are just matrices of numbers between 0.0 (black) and 1.0 (white).
This maps very handily onto normalized k-ratios (or normalized compositions for that matter).
```julia
bestks = optimizeks(SimpleKRatioOptimizer(2.0), resf)
bestf = LinearAlgebra.normalize(bestks)
```
Next, we will create images to represent the k-ratio data. We will both
store images to disk and display the images in the report.
```julia
for bf in bestf
    save(File(format"PNG", joinpath(plotsdir(),"$(bf.element)[Log3].png")), Log3Band.(bf.kratios))
    save(File(format"PNG", joinpath(plotsdir(),"$(bf.element)[Linear].png")), LinearScale.(bf.kratios))
end
```
```julia; fig_height=10; fig_width=10; fig_ext=".svg";
display(labeledimages([symbol(bf.element) for bf in bestf],[Log3Band.(bf.kratios) for bf in bestf], ncols=4))
```
This displays the legend for the Bright's Log-3-Band palette.
```julia; fig_height=1; fig_width=4; fig_ext=".png";
loadlegend("Log3BandBright.png")
```

```julia; fig_height=10; fig_width=10; fig_ext=".svg";
filt = LinearAlgebra.normalize(filter(k->!(element(k) in ( n"C", )), bestks))
@time dv = DiluvianCluster(map(t->t.element, filt),map(t->t.kratios, filt), bin=x->floor(Integer, min(1.0, max(0.0, x)) * 10.0))
display(labeledimage("Clustered Map Data", asimage(dv)))
```

Show the cluster map image palette.
```julia; fig_height=1; fig_width=10; fig_ext=".svg";
display(NeXLParticle.defaultpalette(dv))
```

Select those clusters with more than 1 pixel.
```julia
cl = collect(filter(i->count(dv,i)>1, eachindex(dv)))
```

Plot a multi-ternary with all the clusters with more than 1 pixel.
```julia; fig_height=10; fig_width=10; fig_ext=".svg";
multiternary(dv, cl; maxitems = 2500)
```

Display the masked sum spectra and the associated mask image for each cluster.
```julia; fig_height=4; fig_width=10; fig_ext=".svg";
for i in cl
    mask = asmask(dv,i)
    cs = sum(hs, mask ,name="Cluster $i")
    display(plotandimage(plot(cs, xmax=10.0e3, klms = elms(refs)),Gray.(mask)))
end
nothing
```

Summarize the mean cluster properties.
```julia
ENV["COLUMNS"], ENV["LINES"]=400, 100
summarizeclusters(dv)
```
